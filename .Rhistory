ifelse(is.na(data_subset$COMM_t3), 1,
ifelse(is.na(data_subset$COMM_t2), 1,
ifelse(is.na(data_subset$COMM_t1), 1, NA))))
data_subset$communication <- ifelse(!is.na(data_subset$COMM_t4), data_subset$COMM_t4,
ifelse(!is.na(data_subset$COMM_t3), data_subset$COMM_t3,
ifelse(!is.na(data_subset$COMM_t2), data_subset$COMM_t2,
ifelse(!is.na(data_subset$COMM_t1), data_subset$COMM_t1, NA))))
data_subset$planning <- ifelse(!is.na(data_subset$COMM_t4), data_subset$PL_t3,
ifelse(!is.na(data_subset$COMM_t3), data_subset$PL_t2,
ifelse(!is.na(data_subset$COMM_t2), data_subset$PL_t1, NA)))
data_subset$self_efficacy <- ifelse(!is.na(data_subset$COMM_t4), data_subset$CSE_t3,
ifelse(!is.na(data_subset$COMM_t3), data_subset$CSE_t2,
ifelse(!is.na(data_subset$COMM_t2), data_subset$CSE_t1, NA)))
data_subset$outcome_expectancy <- ifelse(!is.na(data_subset$OE_t4), data_subset$OE_t3,
ifelse(!is.na(data_subset$OE_t3), data_subset$OE_t2,
ifelse(!is.na(data_subset$OE_t2), data_subset$OE_t1, NA)))
data_subset$intention <- ifelse(!is.na(data_subset$INT_t4), data_subset$INT_t3,
ifelse(!is.na(data_subset$INT_t3), data_subset$INT_t2,
ifelse(!is.na(data_subset$INT_t2), data_subset$INT_t1, NA)))
data_subset$user_friendly_rating <- data_subset$accessibility
data_subset_key_vars <- data_subset[,
c("id",
"communication",
"app_progression",
"self_efficacy",
"planning",
"intention",
"outcome_expectancy")]
data_subset_key_vars <- data_subset_key_vars[complete.cases(data_subset_key_vars),]
data_subset_key_vars$id <- as.factor(data_subset_key_vars$id)
indirect_effect <- "
# a path
intention ~ a * self_efficacy + outcome_expectancy
# b path
planning ~ b * intention + self_efficacy
# c path
communication ~ c * planning + self_efficacy
# d prime path
communication ~ dp * self_efficacy
# indirect and total effects
abcd := a * b * c * d
total := dp + abcd
"
indirect_effect_sem <- sem(indirect_effect,
data = data_subset_key_vars,
se = "bootstrap",
bootstrap = 5000)
indirect_effect <- "
# a path
intention ~ a * self_efficacy + outcome_expectancy
# b path
planning ~ b * intention + self_efficacy
# c path
communication ~ c * planning
# d prime path
communication ~ dp * self_efficacy
# indirect and total effects
abcd := a * b * c * d
total := dp + abcd
"
indirect_effect_sem <- sem(indirect_effect,
data = data_subset_key_vars,
se = "bootstrap",
bootstrap = 5000)
indirect_effect <- "
# a path
intention ~ a * self_efficacy + outcome_expectancy
# b path
planning ~ b * intention
# c path
communication ~ c * planning
# d prime path
communication ~ dp * self_efficacy
# indirect and total effects
abcd := a * b * c * d
total := dp + abcd
"
indirect_effect_sem <- sem(indirect_effect,
data = data_subset_key_vars,
se = "bootstrap",
bootstrap = 5000)
indirect_effect <- "
# a path
intention ~ a * self_efficacy + outcome_expectancy
# b path
planning ~ b * intention
# c path
communication ~ c * planning
# d prime path
communication ~ d * self_efficacy
# indirect and total effects
abcd := a * b * c * d
total := d + abcd
"
indirect_effect_sem <- sem(indirect_effect,
data = data_subset_key_vars,
se = "bootstrap",
bootstrap = 5000)
summary(indirect_effect_sem, standardized = TRUE)
# mediation-model
source("R/00_load_package.R")
source("R/01_load_data.R")
source("R/02_data_process_sem.R")
source("R/03_data_process_linear_model.R")
source("R/04_build_forward_stepwise.R")
data_subset_key_vars <- data_subset[,
c("id",
"communication",
"app_progression",
"self_efficacy",
"planning",
"intention",
"outcome_expectancy")]
data_subset_key_vars <- data_subset_key_vars[complete.cases(data_subset_key_vars),]
data_subset_key_vars$id <- as.factor(data_subset_key_vars$id)
indirect_effect <- "
# a path
intention ~ a * self_efficacy + outcome_expectancy
# b path
planning ~ b * intention  + self_efficacy
# c path
communication ~ c * planning + self_efficacy
# d prime path
communication ~ dp * self_efficacy
# indirect and total effects
abc := a * b * c
total := dp + abc
"
indirect_effect_sem <- sem(indirect_effect,
data = data_subset_key_vars,
se = "bootstrap",
bootstrap = 100)
indirect_effect <- "
# a path
intention ~ a * self_efficacy + outcome_expectancy
# b path
planning ~ b * intention  + self_efficacy
# c path
communication ~ c * planning
# d prime path
communication ~ dp * self_efficacy
# indirect and total effects
abc := a * b * c
total := dp + abc
"
indirect_effect_sem <- sem(indirect_effect,
data = data_subset_key_vars,
se = "bootstrap",
bootstrap = 100)
summary(indirect_effect_sem, standardized = TRUE)
indirect_effect <- "
# a path
intention ~ a * (self_efficacy + outcome_expectancy)
# b path
planning ~ b * (intention  + self_efficacy)
# c path
communication ~ c * planning
# d prime path
communication ~ dp * self_efficacy
# indirect and total effects
abc := a * b * c
total := dp + abc
"
indirect_effect_sem <- sem(indirect_effect,
data = data_subset_key_vars,
se = "bootstrap",
bootstrap = 5000)
summary(indirect_effect_sem, standardized = TRUE)
indirect_effect <- "
# path one
intention ~ a * self_efficacy + b * outcome_expectancy)
# path two
planning ~ c * intention  + d * self_efficacy
# path three
communication ~ e * planning
# prime path
communication ~ pp * self_efficacy
# indirect and total effects
abcde := a * b * c * d * e
total := pp + abcde
"
indirect_effect_sem <- sem(indirect_effect,
data = data_subset_key_vars,
se = "bootstrap",
bootstrap = 100)
indirect_effect <- "
# path one
intention ~ a * self_efficacy + b * outcome_expectancy
# path two
planning ~ c * intention  + d * self_efficacy
# path three
communication ~ e * planning
# prime path
communication ~ pp * self_efficacy
# indirect and total effects
abcde := a * b * c * d * e
total := pp + abcde
"
indirect_effect_sem <- sem(indirect_effect,
data = data_subset_key_vars,
se = "bootstrap",
bootstrap = 100)
summary(indirect_effect_sem, standardized = TRUE
)
indirect_effect_thru_intention <- "
# path one
intention ~ a * self_efficacy + outcome_expectancy
# path two
planning ~ b * intention
# path three
communication ~ c * planning
# prime path
communication ~ pp * self_efficacy
# indirect and total effects
abcde := a * b * c
total := pp + abc
"
indirect_effect_sem <- sem(indirect_effect,
data = data_subset_key_vars,
se = "bootstrap",
bootstrap = 100)
summary(indirect_effect_sem, standardized = TRUE)
indirect_effect_thru_intention <- "
# path one
intention ~ a * self_efficacy + outcome_expectancy
# path two
planning ~ b * intention
# path three
communication ~ c * planning
# prime path
communication ~ pp * self_efficacy
# indirect and total effects
abc := a * b * c
total := pp + abc
"
indirect_effect_sem <- sem(indirect_effect,
data = data_subset_key_vars,
se = "bootstrap",
bootstrap = 100)
summary(indirect_effect_sem, standardized = TRUE)
indirect_effect_sem <- sem(indirect_effect_thru_intention,
data = data_subset_key_vars,
se = "bootstrap",
bootstrap = 100)
summary(indirect_effect_sem, standardized = TRUE)
indirect_effect_thru_planning <- "
# path one
planning ~ a * self_efficacy
# path two
communication ~ b * planning
# prime path
communication ~ pp * self_efficacy
# indirect and total effects
ab := a * b
total := pp + ab
"
indirect_effect_sem_thru_planning <- sem(indirect_effect_thru_planning,
data = data_subset_key_vars,
se = "bootstrap",
bootstrap = 100)
summary(indirect_effect_sem_thru_planning, standardized = TRUE)
indirect_effect_thru_intention <- "
# path one
intention ~ a * self_efficacy + outcome_expectancy
# path two
planning ~ b * intention
# path three
communication ~ c * planning
# prime path
communication ~ pp * self_efficacy
# indirect and total effects
abc := a * b * c
total := pp + abc
"
indirect_effect_sem_thru_intention <- sem(indirect_effect_thru_intention,
data = data_subset_key_vars,
se = "bootstrap",
bootstrap = 5000)
sink("output/indirect_effect_thru_intention.txt")
print(summary(indirect_effect_sem_thru_intention, standardized = TRUE))
sink()
summary(indirect_effect_sem_thru_intention, standardized = TRUE)
indirect_effect_thru_planning <- "
# path one
planning ~ a * self_efficacy
# path two
communication ~ b * planning
# prime path
communication ~ pp * self_efficacy
# indirect and total effects
ab := a * b
total := pp + ab
"
indirect_effect_sem_thru_planning <- sem(indirect_effect_thru_planning,
data = data_subset_key_vars,
se = "bootstrap",
bootstrap = 5000)
sink("output/indirect_effect_thru_planning.txt")
print(summary(indirect_effect_sem_thru_planning, standardized = TRUE))
sink()
indirect_effect_outcome_expectancy <- "
# path one
intention ~ a * outcome_expectancy
# path two
planning ~ b * intention
# prime path
communication ~ pp * outcome_expectancy
# indirect and total effects
ab := a * b
total := pp + ab
"
indirect_effect_sem_outcome_expectancy <- sem(indirect_effect_outcome_expectancy,
data = data_subset_key_vars,
se = "bootstrap",
bootstrap = 100)
summary(indirect_effect_sem_outcome_expectancy, standardized = TRUE)
indirect_effect_outcome_expectancy <- "
# path one
intention ~ a * outcome_expectancy
# path two
planning ~ b * intention
# path three
communication ~ c * planning
# prime path
communication ~ pp * outcome_expectancy
# indirect and total effects
abc := a * b * c
total := pp + abc
"
indirect_effect_sem_outcome_expectancy <- sem(indirect_effect_outcome_expectancy,
data = data_subset_key_vars,
se = "bootstrap",
bootstrap = 100)
summary(indirect_effect_sem_outcome_expectancy, standardized = TRUE)
indirect_effect_sem_outcome_expectancy <- sem(indirect_effect_outcome_expectancy,
data = data_subset_key_vars,
se = "bootstrap",
bootstrap = 5000)
sink("output/indirect_effect_sem_outcome_expectancy.txt")
print(summary(indirect_effect_sem_outcome_expectancy, standardized = TRUE))
sink()
summary(indirect_effect_sem_outcome_expectancy, standardized = TRUE)
# mediation-model
source("R/00_load_package.R")
source("R/01_load_data.R")
source("R/02_data_process_sem.R")
source("R/03_data_process_linear_model.R")
source("R/04_build_forward_stepwise.R")
data_subset_key_vars <- data_subset[,
c("id",
"communication",
"app_progression",
"self_efficacy",
"planning",
"intention",
"outcome_expectancy")]
data_subset_key_vars <- data_subset_key_vars[complete.cases(data_subset_key_vars),]
data_subset_key_vars$id <- as.factor(data_subset_key_vars$id)
indirect_effect_thru_self_efficacy <- "
# path one
intention ~ a * self_efficacy + outcome_expectancy
# path two
planning ~ b * intention + c * self_efficacy
# path three
communication ~ d * planning
# prime path
communication ~ pp * self_efficacy
# indirect and total effects
abcd := a * b * c * d
total := pp + abcd
"
indirect_effect_sem_thru_self_efficacy <- sem(indirect_effect_thru_self_efficacy,
data = data_subset_key_vars,
se = "bootstrap",
bootstrap = 100)
summary(indirect_effect_sem_thru_intention, standardized = TRUE)
summary(indirect_effect_sem_thru_self_efficacy, standardized = TRUE)
indirect_effect_self_efficacy <- "
# path one
intention ~ a * self_efficacy + outcome_expectancy
# path two
planning ~ b * intention + c * self_efficacy
# path three
communication ~ d * planning
# prime path
communication ~ pp * self_efficacy
# indirect and total effects
abcd := a * b * c * d
total := pp + abcd
"
indirect_effect_sem_self_efficacy <- sem(indirect_effect_self_efficacy,
data = data_subset_key_vars,
se = "bootstrap",
bootstrap = 5000)
summary(indirect_effect_sem_self_efficacy, standardized = TRUE)
sink("output/indirect_effect_sem_self_efficacy.txt")
print(summary(indirect_effect_sem_self_efficacy, standardized = TRUE))
sink()
# mediation-model
source("R/00_load_package.R")
source("R/01_load_data.R")
source("R/02_data_process_sem.R")
source("R/03_data_process_linear_model.R")
source("R/04_build_forward_stepwise.R")
source("R/05_build_mediation_model.R")
data_subset_dem_vars <- data_subset[, c(
"age",
"education",
"fam_composition")]
data_subset_dem_vars["education"][data_subset_dem_vars["education"] == 0 ] <- NA
data_subset_dem_vars["fam_composition"][data_subset_dem_vars["fam_composition"] == 0 ] <- NA
age_missing <- summary(data_subset_dem_vars$age)[[7]]
table_age_numbers <- table(data_subset_dem_vars$age)
table_age_prop <- prop.table(table_age_numbers) * 100
age_dem_info <- flattenDemTable("age", table_age_numbers, table_age_prop, age_missing)
flattenCorrMatrix <- function(cormat, pmat, nmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor  =(cormat)[ut],
p = pmat[ut],
n = nmat[ut]
)
}
flattenDemTable <- function(variable, numbers, percentage, missing) {
table_numbers <- as.data.frame(numbers)
names(table_numbers)[names(table_numbers) == "Var1"] <- variable
names(table_numbers)[names(table_numbers) == "Freq"] <- "numbers"
table_prop <- as.data.frame(percentage)
names(table_prop)[names(table_prop) == "Var1"] <- variable
names(table_prop)[names(table_prop) == "Freq"] <- "percentage"
table_summary <- merge(table_numbers, table_prop)
table_summary$missing <- missing
return(table_summary)
}
data_subset_dem_vars["education"][data_subset_dem_vars["education"] == 0 ] <- NA
data_subset_dem_vars["fam_composition"][data_subset_dem_vars["fam_composition"] == 0 ] <- NA
age_missing <- summary(data_subset_dem_vars$age)[[7]]
table_age_numbers <- table(data_subset_dem_vars$age)
table_age_prop <- prop.table(table_age_numbers) * 100
age_dem_info <- flattenDemTable("age", table_age_numbers, table_age_prop, age_missing)
write.csv(age_dem_info, "output/age_dem_info.csv")
education_missing <- summary(data_subset_dem_vars$education)[[7]]
table_education_numbers <- table(data_subset_dem_vars$education)
table_education_prop <- prop.table(table_education_numbers) * 100
education_dem_info <- flattenDemTable("education", table_education_numbers, table_education_prop, education_missing)
write.csv(education_dem_info, "output/education_dem_info.csv")
fam_composition_missing <- summary(data_subset_dem_vars$fam_composition)[[7]]
table_fam_composition_numbers <- table(data_subset_dem_vars$fam_composition)
table_fam_composition_prop <- prop.table(table_fam_composition_numbers) * 100
fam_composition_info <- flattenDemTable("fam_composition", table_fam_composition_numbers, table_fam_composition_prop, fam_composition_missing)
write.csv(education_dem_info, "output/fam_composition_info.csv")
write.csv(fam_composition_info, "output/fam_composition_info.csv")
data_input_comp <- read.spss("data/AppBaseline.sav",
use.value.labels = FALSE,
to.data.frame = TRUE)
table(data_input_comp$KG_IG_DW)
flattenCorrMatrix <- function(cormat, pmat, nmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor  =(cormat)[ut],
p = pmat[ut],
n = nmat[ut]
)
}
flattenDemTable <- function(variable, numbers, percentage, missing) {
table_numbers <- as.data.frame(numbers)
names(table_numbers)[names(table_numbers) == "Var1"] <- variable
names(table_numbers)[names(table_numbers) == "Freq"] <- "numbers"
table_prop <- as.data.frame(percentage)
names(table_prop)[names(table_prop) == "Var1"] <- variable
names(table_prop)[names(table_prop) == "Freq"] <- "percentage"
table_summary <- merge(table_numbers, table_prop)
table_summary$missing <- missing
return(table_summary)
}
library(foreign)
library(lcsm)
library(data.table)
library(knitr)
library(lavaan)
library(mice)
library(scales)
library(semTools)
library(ggplot2)
library(rpart)
library(rpart.plot)
library(lme4)
library(Hmisc)
data_input_comp <- read.spss("data/AppBaseline.sav",
use.value.labels = FALSE,
to.data.frame = TRUE)
data_input_comp$id <- seq_along(data_input_comp[,1])
data_input_comp$randomisation <- ifelse(is.na(data_input_comp$KG_IG_DW) &
data_input_comp$Standort %in% c(0, 1), 1, data_input_comp$KG_IG_DW)
table(data_input_comp$randomisation)
# mediation-model
source("R/00_load_package.R")
source("R/01_load_data.R")
table(data_input_comp$Code)
table(data_input_comp$sonst)
data_input_comp <- read.spss("data/AppBaseline_prep_mplus_17-03.2023.sav",
use.value.labels = FALSE,
to.data.frame = TRUE)
# mediation-model
source("R/00_load_package.R")
source("R/01_load_data.R")
source("R/02_data_process_sem.R")
source("R/03_data_process_linear_model.R")
