# prime path
communication ~ pp * self_efficacy
# indirect and total effects
abc := a * b * c
total := pp + abc
"
indirect_effect_sem_thru_intention <- sem(indirect_effect_thru_intention,
data = data_subset_key_vars,
se = "bootstrap",
bootstrap = 5000)
sink("output/indirect_effect_thru_intention.txt")
print(summary(indirect_effect_sem_thru_intention, standardized = TRUE))
sink()
summary(indirect_effect_sem_thru_intention, standardized = TRUE)
indirect_effect_thru_planning <- "
# path one
planning ~ a * self_efficacy
# path two
communication ~ b * planning
# prime path
communication ~ pp * self_efficacy
# indirect and total effects
ab := a * b
total := pp + ab
"
indirect_effect_sem_thru_planning <- sem(indirect_effect_thru_planning,
data = data_subset_key_vars,
se = "bootstrap",
bootstrap = 5000)
sink("output/indirect_effect_thru_planning.txt")
print(summary(indirect_effect_sem_thru_planning, standardized = TRUE))
sink()
indirect_effect_outcome_expectancy <- "
# path one
intention ~ a * outcome_expectancy
# path two
planning ~ b * intention
# prime path
communication ~ pp * outcome_expectancy
# indirect and total effects
ab := a * b
total := pp + ab
"
indirect_effect_sem_outcome_expectancy <- sem(indirect_effect_outcome_expectancy,
data = data_subset_key_vars,
se = "bootstrap",
bootstrap = 100)
summary(indirect_effect_sem_outcome_expectancy, standardized = TRUE)
indirect_effect_outcome_expectancy <- "
# path one
intention ~ a * outcome_expectancy
# path two
planning ~ b * intention
# path three
communication ~ c * planning
# prime path
communication ~ pp * outcome_expectancy
# indirect and total effects
abc := a * b * c
total := pp + abc
"
indirect_effect_sem_outcome_expectancy <- sem(indirect_effect_outcome_expectancy,
data = data_subset_key_vars,
se = "bootstrap",
bootstrap = 100)
summary(indirect_effect_sem_outcome_expectancy, standardized = TRUE)
indirect_effect_sem_outcome_expectancy <- sem(indirect_effect_outcome_expectancy,
data = data_subset_key_vars,
se = "bootstrap",
bootstrap = 5000)
sink("output/indirect_effect_sem_outcome_expectancy.txt")
print(summary(indirect_effect_sem_outcome_expectancy, standardized = TRUE))
sink()
summary(indirect_effect_sem_outcome_expectancy, standardized = TRUE)
# mediation-model
source("R/00_load_package.R")
source("R/01_load_data.R")
source("R/02_data_process_sem.R")
source("R/03_data_process_linear_model.R")
source("R/04_build_forward_stepwise.R")
data_subset_key_vars <- data_subset[,
c("id",
"communication",
"app_progression",
"self_efficacy",
"planning",
"intention",
"outcome_expectancy")]
data_subset_key_vars <- data_subset_key_vars[complete.cases(data_subset_key_vars),]
data_subset_key_vars$id <- as.factor(data_subset_key_vars$id)
indirect_effect_thru_self_efficacy <- "
# path one
intention ~ a * self_efficacy + outcome_expectancy
# path two
planning ~ b * intention + c * self_efficacy
# path three
communication ~ d * planning
# prime path
communication ~ pp * self_efficacy
# indirect and total effects
abcd := a * b * c * d
total := pp + abcd
"
indirect_effect_sem_thru_self_efficacy <- sem(indirect_effect_thru_self_efficacy,
data = data_subset_key_vars,
se = "bootstrap",
bootstrap = 100)
summary(indirect_effect_sem_thru_intention, standardized = TRUE)
summary(indirect_effect_sem_thru_self_efficacy, standardized = TRUE)
indirect_effect_self_efficacy <- "
# path one
intention ~ a * self_efficacy + outcome_expectancy
# path two
planning ~ b * intention + c * self_efficacy
# path three
communication ~ d * planning
# prime path
communication ~ pp * self_efficacy
# indirect and total effects
abcd := a * b * c * d
total := pp + abcd
"
indirect_effect_sem_self_efficacy <- sem(indirect_effect_self_efficacy,
data = data_subset_key_vars,
se = "bootstrap",
bootstrap = 5000)
summary(indirect_effect_sem_self_efficacy, standardized = TRUE)
sink("output/indirect_effect_sem_self_efficacy.txt")
print(summary(indirect_effect_sem_self_efficacy, standardized = TRUE))
sink()
# mediation-model
source("R/00_load_package.R")
source("R/01_load_data.R")
source("R/02_data_process_sem.R")
source("R/03_data_process_linear_model.R")
source("R/04_build_forward_stepwise.R")
source("R/05_build_mediation_model.R")
data_subset_dem_vars <- data_subset[, c(
"age",
"education",
"fam_composition")]
data_subset_dem_vars["education"][data_subset_dem_vars["education"] == 0 ] <- NA
data_subset_dem_vars["fam_composition"][data_subset_dem_vars["fam_composition"] == 0 ] <- NA
age_missing <- summary(data_subset_dem_vars$age)[[7]]
table_age_numbers <- table(data_subset_dem_vars$age)
table_age_prop <- prop.table(table_age_numbers) * 100
age_dem_info <- flattenDemTable("age", table_age_numbers, table_age_prop, age_missing)
flattenCorrMatrix <- function(cormat, pmat, nmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor  =(cormat)[ut],
p = pmat[ut],
n = nmat[ut]
)
}
flattenDemTable <- function(variable, numbers, percentage, missing) {
table_numbers <- as.data.frame(numbers)
names(table_numbers)[names(table_numbers) == "Var1"] <- variable
names(table_numbers)[names(table_numbers) == "Freq"] <- "numbers"
table_prop <- as.data.frame(percentage)
names(table_prop)[names(table_prop) == "Var1"] <- variable
names(table_prop)[names(table_prop) == "Freq"] <- "percentage"
table_summary <- merge(table_numbers, table_prop)
table_summary$missing <- missing
return(table_summary)
}
data_subset_dem_vars["education"][data_subset_dem_vars["education"] == 0 ] <- NA
data_subset_dem_vars["fam_composition"][data_subset_dem_vars["fam_composition"] == 0 ] <- NA
age_missing <- summary(data_subset_dem_vars$age)[[7]]
table_age_numbers <- table(data_subset_dem_vars$age)
table_age_prop <- prop.table(table_age_numbers) * 100
age_dem_info <- flattenDemTable("age", table_age_numbers, table_age_prop, age_missing)
write.csv(age_dem_info, "output/age_dem_info.csv")
education_missing <- summary(data_subset_dem_vars$education)[[7]]
table_education_numbers <- table(data_subset_dem_vars$education)
table_education_prop <- prop.table(table_education_numbers) * 100
education_dem_info <- flattenDemTable("education", table_education_numbers, table_education_prop, education_missing)
write.csv(education_dem_info, "output/education_dem_info.csv")
fam_composition_missing <- summary(data_subset_dem_vars$fam_composition)[[7]]
table_fam_composition_numbers <- table(data_subset_dem_vars$fam_composition)
table_fam_composition_prop <- prop.table(table_fam_composition_numbers) * 100
fam_composition_info <- flattenDemTable("fam_composition", table_fam_composition_numbers, table_fam_composition_prop, fam_composition_missing)
write.csv(education_dem_info, "output/fam_composition_info.csv")
write.csv(fam_composition_info, "output/fam_composition_info.csv")
data_input_comp <- read.spss("data/AppBaseline.sav",
use.value.labels = FALSE,
to.data.frame = TRUE)
table(data_input_comp$KG_IG_DW)
flattenCorrMatrix <- function(cormat, pmat, nmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor  =(cormat)[ut],
p = pmat[ut],
n = nmat[ut]
)
}
flattenDemTable <- function(variable, numbers, percentage, missing) {
table_numbers <- as.data.frame(numbers)
names(table_numbers)[names(table_numbers) == "Var1"] <- variable
names(table_numbers)[names(table_numbers) == "Freq"] <- "numbers"
table_prop <- as.data.frame(percentage)
names(table_prop)[names(table_prop) == "Var1"] <- variable
names(table_prop)[names(table_prop) == "Freq"] <- "percentage"
table_summary <- merge(table_numbers, table_prop)
table_summary$missing <- missing
return(table_summary)
}
library(foreign)
library(lcsm)
library(data.table)
library(knitr)
library(lavaan)
library(mice)
library(scales)
library(semTools)
library(ggplot2)
library(rpart)
library(rpart.plot)
library(lme4)
library(Hmisc)
data_input_comp <- read.spss("data/AppBaseline.sav",
use.value.labels = FALSE,
to.data.frame = TRUE)
data_input_comp$id <- seq_along(data_input_comp[,1])
data_input_comp$randomisation <- ifelse(is.na(data_input_comp$KG_IG_DW) &
data_input_comp$Standort %in% c(0, 1), 1, data_input_comp$KG_IG_DW)
table(data_input_comp$randomisation)
# mediation-model
source("R/00_load_package.R")
source("R/01_load_data.R")
table(data_input_comp$Code)
table(data_input_comp$sonst)
data_input_comp <- read.spss("data/AppBaseline_prep_mplus_17-03.2023.sav",
use.value.labels = FALSE,
to.data.frame = TRUE)
# mediation-model
source("R/00_load_package.R")
source("R/01_load_data.R")
source("R/02_data_process_sem.R")
source("R/03_data_process_linear_model.R")
# visualise-drop-out
source("R/00_load_package.R")
source("R/01_load_data.R")
source("R/02_data_process_sem.R")
View(data_input_comp)
table(data_input_comp$KG_IG_DW)
source("R/01_load_data.R")
data_input_comp$id <- seq_along(data_input_comp[,1])
data_input_comp$randomisation_modified <- ifelse(is.na(data_input_comp$KG_IG_DW) &
data_input_comp$Standort %in% c(0, 1), 1, data_input_comp$KG_IG_DW)
data_input_comp <- data_input_comp[data_input_comp$randomisation_modified %in% c(0, 1), ]
data_input_comp$recruitment_strategy <- ifelse(data_input_comp$Standort %in% c(0,1), "clinic",
"germany-wide")
data_input_comp$app_entry <- ifelse(data_input_comp$recruitment_strategy == "clinic", "clinic",
ifelse(data_input_comp$KG_IG_DW == 0, "waitlist", "direct"))
data_input_comp$COMM <- rowMeans(data_input_comp[, c("COMM1" ,
"COMM2",
"COMM3",
"COMM4",
"COMM5" ,
"COMM6",
"COMM7")],
na.rm = TRUE)
data_input_comp$C_m_t4 <- rowMeans(data_input_comp[, c("COMM1_t4_likert_t" ,
"COMM2_t4_likert_t",
"COMM3_t4_likert_t",
"COMM4_t4_likert_t",
"COMM5_t4_likert_t" ,
"COMM6_t4_likert_t",
"COMM7_t4_likert_t")],
na.rm = TRUE)
data_subset <- data_input_comp[, c("id",
"Alter",
"Ausbildung",
"Familie",
"randomisation_modified",
"recruitment_strategy",
"app_entry",
"OE",
"OE_t1_likert_t",
"OE_t2_likert_t",
"OE_t3_likert_t",
"OE_t4_likert_t",
"CSE",
"CSE_t1_t",
"CSE_t2_t",
"CSE_t3_t",
"CSE_t4_t",
"INT",
"INT_t1_likert_t",
"INT_t1_A_likert_t",
"INT_t1_B_likert_t",
"INT_t1_C_likert_t",
"PL",
"PL_t1_t",
"PL_t2_t",
"PL_t3_t",
"PL_t4_t",
"COMM",
"C_m_t1",
"C_m_t2",
"C_m_t3",
"C_m_t4",
"L10Nuterfreundlichkeit_t1_a1",
"L10Nutzen_t1_a1",
"L9Zufrieden_t1_a1")]
data_subset$Alter <- ifelse(data_subset$Alter == 1, round(runif(1, min=18, max=19), 0),
ifelse(data_subset$Alter == 2, round(runif(1, min=20, max=29), 0),
ifelse(data_subset$Alter == 3, round(runif(1, min=30, max=39), 0),
ifelse(data_subset$Alter == 4, round(runif(1, min=40, max=49), 0),
ifelse(data_subset$Alter == 5, round(runif(1, min=50, max=59), 0),
ifelse(data_subset$Alter == 6, round(runif(1, min=60, max=69), 0),
ifelse(data_subset$Alter == 7, round(runif(1, min=70, max=79), 0),
data_subset$Alter)))))))
data_subset$Alter <- ifelse(data_subset$Alter < 18,
NA,
data_subset$Alter)
data_subset$L10Nuterfreundlichkeit_t1_a1 <- ifelse(data_subset$L10Nuterfreundlichkeit_t1_a1 < 0,
NA,
data_subset$L10Nuterfreundlichkeit_t1_a1)
data_subset$L10Nuterfreundlichkeit_t1_a1 <- rescale(data_subset$L10Nuterfreundlichkeit_t1_a1,
to = c(1, 6))
data_subset$L10Nutzen_t1_a1 <- ifelse(data_subset$L10Nutzen_t1_a1 < 0,
NA,
data_subset$L10Nutzen_t1_a1)
data_subset$L10Nutzen_t1_a1 <- rescale(data_subset$L10Nutzen_t1_a1,
to = c(1, 6))
data_subset$L9Zufrieden_t1_a1 <- ifelse(data_subset$L9Zufrieden_t1_a1 < 0,
NA,
data_subset$L9Zufrieden_t1_a1)
data_subset$L9Zufrieden_t1_a1 <- rescale(data_subset$L9Zufrieden_t1_a1,
to = c(1, 6))
## ----variable-rename
names(data_subset)[names(data_subset) == 'Familie'] <- 'fam_composition'
# visualise-drop-out
source("R/00_load_package.R")
source("R/01_load_data.R")
source("R/02_data_process_sem.R")
source("R/03_data_process_linear_model.R")
data_subset_key_vars <- data_subset[,
c("id",
"randomisation_modified",
"app_entry",
"recruitment_strategy",
"early_drop_out",
"OE_t1",
"INT_t1",
"CSE_t1",
"PL_t1",
"age",
"education",
"fam_composition")]
data_subset_key_vars <- data_subset_key_vars[complete.cases(data_subset_key_vars),]
data_subset_key_vars$id <- as.factor(data_subset_key_vars$id)
data_subset_key_vars <- data_subset[,
c("id",
"randomisation_modified",
"app_entry",
"recruitment_strategy",
"early_drop_out",
"OE_t1",
"INT_t1",
"CSE_t1",
"PL_t1",
"age",
"education",
"fam_composition")]
data_subset_key_vars <- data_subset_key_vars[complete.cases(data_subset_key_vars),]
data_subset_key_vars$id <- as.factor(data_subset_key_vars$id)
data_subset_key_vars$early_drop_out <- factor(data_subset_key_vars$early_drop_out,
levels = c(0,1),
labels = c("No early drop out", "Early drop out"))
data_subset_key_vars$early_drop_out <- as.factor(data_subset_key_vars$randomisation_modified)
data_subset_key_vars$early_drop_out <- as.factor(data_subset_key_vars$app_entry)
data_subset_key_vars$early_drop_out <- as.factor(data_subset_key_vars$recruitment_strategy)
# model-early-drop-out
model_1_drop_out_early <- glm(early_drop_out ~ OE_t1 + INT_t1 + CSE_t1 + PL_t1 + app_entry,
family = binomial(link='logit'),
data = data_subset_key_vars)
summary(model_1_drop_out_early)
test <- data_subset_key_vars[data_subset_key_vars$app_entry == "clinic", ]
table(test$early_drop_out)
data_subset_key_vars <- data_subset[,
c("id",
"randomisation_modified",
"app_entry",
"recruitment_strategy",
"early_drop_out",
"OE_t1",
"INT_t1",
"CSE_t1",
"PL_t1",
"age",
"education",
"fam_composition")]
data_subset_key_vars <- data_subset_key_vars[complete.cases(data_subset_key_vars),]
data_subset_key_vars$id <- as.factor(data_subset_key_vars$id)
data_subset_key_vars$early_drop_out <- factor(data_subset_key_vars$early_drop_out,
levels = c(0,1),
labels = c("No early drop out", "Early drop out"))
data_subset_key_vars$randomisation_modified <- as.factor(data_subset_key_vars$randomisation_modified)
data_subset_key_vars$app_entry <- as.factor(data_subset_key_vars$app_entry)
data_subset_key_vars$recruitment_strategy <- as.factor(data_subset_key_vars$recruitment_strategy)
# model-early-drop-out
model_1_drop_out_early <- glm(early_drop_out ~ OE_t1 + INT_t1 + CSE_t1 + PL_t1 + app_entry,
family = binomial(link='logit'),
data = data_subset_key_vars)
summary(model_1_drop_out_early)
# model-early-drop-out
model_1_drop_out_early <- glm(early_drop_out ~ OE_t1 + INT_t1 + CSE_t1 + PL_t1 + app_entry + age + education + fam_composition,
family = binomial(link='logit'),
data = data_subset_key_vars)
summary(model_1_drop_out_early)
# model-early-drop-out
model_1_drop_out_early <- glm(early_drop_out ~ OE_t1 + INT_t1 + CSE_t1 + PL_t1 + app_entry,
family = binomial(link='logit'),
data = data_subset_key_vars)
summary(model_1_drop_out_early)
# model-early-drop-out
model_1_drop_out_early <- glm(early_drop_out ~ OE_t1 + INT_t1 + CSE_t1 + PL_t1 + app_entry + age + education + fam_composition,
family = binomial(link='logit'),
data = data_subset_key_vars)
summary(model_1_drop_out_early)
hist(data_subset_key_vars$age)
summary(model_1_drop_out_early)
sink("output/model_1_drop_out_early.txt")
print(summary(model_1_drop_out_early))
sink()
data_subset_key_vars <- data_subset[,
c("id",
"early_drop_out",
"OE_t1",
"INT_t1",
"CSE_t1",
"PL_t1",
"app_entry")]
setDT(data_subset_key_vars)
data_subset_long_drop_out <- melt(data_subset_key_vars,
id.vars = c("id", "early_drop_out", "app_entry"),
variable.name = "HAPA_construct",
value.name = "value")
data_subset_long_drop_out$early_drop_out <-
as.factor(data_subset_long_drop_out$early_drop_out)
data_subset_long_drop_out$app_entry <-
as.factor(data_subset_long_drop_out$app_entry)
ggplot(data = data_subset_long_drop_out,
aes(x = HAPA_construct,
y = value,
fill = early_drop_out)) +
geom_boxplot() +
labs(title = paste0("Behaviour change constructs by drop out"),
subtitle = "Box plots of HAPA constructs by drop out",
caption = "Data source: TeamBaby",
fill = "Early drop out") +
xlab("Health Action Process Approach Constructs") +
ylab("Scores") +
scale_fill_discrete(labels = c("No", "Yes")) +
scale_x_discrete(labels=c("OE_t1" = "Outcome Expectancy",
"INT_t1" = "Intention",
"CSE_t1" = "Self-efficay",
"PL_t1" = "Planning")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic")
)
table(data_subset$early_drop_out)
table(data_subset_key_vars$early_drop_out)
test <- data_subset_key_vars[data_subset_key_vars$app_entry == "clinic", ]
data_subset_key_vars <- data_subset[,
c("id",
"randomisation_modified",
"app_entry",
"recruitment_strategy",
"early_drop_out",
"OE_t1",
"INT_t1",
"CSE_t1",
"PL_t1",
"age",
"education",
"fam_composition")]
data_subset_key_vars <- data_subset_key_vars[complete.cases(data_subset_key_vars),]
data_subset_key_vars$id <- as.factor(data_subset_key_vars$id)
data_subset_key_vars$early_drop_out <- factor(data_subset_key_vars$early_drop_out,
levels = c(0,1),
labels = c("No early drop out", "Early drop out"))
data_subset_key_vars$randomisation_modified <- as.factor(data_subset_key_vars$randomisation_modified)
data_subset_key_vars$app_entry <- as.factor(data_subset_key_vars$app_entry)
data_subset_key_vars$recruitment_strategy <- as.factor(data_subset_key_vars$recruitment_strategy)
table(data_subset_key_vars$early_drop_out)
table(data_subset_key_vars$app_entry)
test <- data_subset_key_vars[data_subset_key_vars$app_entry == "clinic", ]
hist(test$age)
test <- data_subset_key_vars[data_subset_key_vars$recruitment_strategy == "clinic", ]
hist(test$age)
test2 <- data_subset_key_vars[data_subset_key_vars$recruitment_strategy == "germany-wide", ]
hist(test2$age)
hist(test$age)
# model-early-drop-out
model_1_drop_out_early <- glm(early_drop_out ~ OE_t1 + INT_t1 + CSE_t1 + PL_t1 + app_entry + age + education + fam_composition,
family = binomial,
data = data_subset_key_vars)
summary(model_1_drop_out_early)
exp(-0.17)
exp(1.38)
exp(0.93)
